//
// ENG_ANIM_VECT
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    ENG_ANIM_VECT_VEL                       = VALUE(INT, "Velocities", "VEL");
    ENG_ANIM_VECT_DISP                      = VALUE(INT, "Displacements", "DISP");
    ENG_ANIM_VECT_ACC                       = VALUE(INT, "Accelerations", "ACC");
    ENG_ANIM_VECT_CONT                      = VALUE(INT, "Contact forces", "CONT");
    ENG_ANIM_VECT_CONT2                     = VALUE(INT, "Tied interface forces", "CONT2");
    ENG_ANIM_VECT_FINT                      = VALUE(INT, "Internal forces", "FINT");
    ENG_ANIM_VECT_FEXT                      = VALUE(INT, "External forces", "FEXT");
    ENG_ANIM_VECT_FOPT                      = VALUE(INT, "Forces and moments for rigid bodies, rigid walls and sections", "FOPT");
    ENG_ANIM_VECT_PCONT                     = VALUE(INT, "Contact pressure animation vector", "PCONT");
    ENG_ANIM_VECT_VROT                      = VALUE(INT, "Rotational velocities", "VROT");
    ENG_ANIM_VECT_VFLU                      = VALUE(INT, "Fluid velocities for Incompressible fluid flow by BEM and monitored volume type FVMBAG", "VFLU");
    ENG_ANIM_VECT_DROT                      = VALUE(INT, "Rotations", "DROT");
    ENG_ANIM_VECT_FVEL                      = VALUE(INT, "Gas velocity vectors for fluid flow in Finite Volume Method monitored volume type /FVMBAG1", "FVEL");
    ENG_ANIM_VECT_FREAC                     = VALUE(INT, "Reaction forces for imposed velocities, displacements, accelerations and boundary conditions", "FREAC");
    ENG_ANIM_VECT_MREAC                     = VALUE(INT, "Reaction moments for imposed velocities, displacements, accelerations and boundary conditions", "MREAC");
    ENG_ANIM_VECT_CLUSTER                   = VALUE(INT, "Spot weld /CLUSTER", "CLUST");
    ENG_ANIM_VECT_CLUSTER_FORCE             = VALUE(INT, "Spot weld /CLUSTER force vector in global coordinates", "CLUST/FORCE");
    ENG_ANIM_VECT_CLUSTER_MOM               = VALUE(INT, "Spot weld /CLUSTER moment vector in global coordinates", "CLUST/MOM");
    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");

    IOFLAG                                  = VALUE(INT, "IOFLAG");
    _opt                                    = VALUE(STRING, "_opt");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    ENG_ANIM_VECT_VEL                       = 4876;
    ENG_ANIM_VECT_DISP                      = 4872;
    ENG_ANIM_VECT_ACC                       = 4877;
    ENG_ANIM_VECT_CONT                      = 4870;
    ENG_ANIM_VECT_CONT2                     = 7433;
    ENG_ANIM_VECT_FINT                      = 4873;
    ENG_ANIM_VECT_FEXT                      = 4921;
    ENG_ANIM_VECT_FOPT                      = 7434;
    ENG_ANIM_VECT_PCONT                     = 4871;
    ENG_ANIM_VECT_VROT                      = 7435;
    ENG_ANIM_VECT_VFLU                      = 7437;
    ENG_ANIM_VECT_DROT                      = 7436;
    ENG_ANIM_VECT_FVEL                      = 1763;
    ENG_ANIM_VECT_FREAC                     = 820;
    ENG_ANIM_VECT_MREAC                     = 8063;
    ENG_ANIM_VECT_CLUSTER                   = 8069;
    ENG_ANIM_VECT_CLUSTER_FORCE             = 8070;
    ENG_ANIM_VECT_CLUSTER_MOM               = 8080;
    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    IOFLAG                                  = -1;
    _opt                                    = -1;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/ANIM/VECT/");

    FLAG(ENG_ANIM_VECT_VEL);
    FLAG(ENG_ANIM_VECT_DISP);
    FLAG(ENG_ANIM_VECT_ACC);
    FLAG(ENG_ANIM_VECT_CONT);
    FLAG(ENG_ANIM_VECT_CONT2);
    FLAG(ENG_ANIM_VECT_FINT);
    FLAG(ENG_ANIM_VECT_FEXT);
    FLAG(ENG_ANIM_VECT_FOPT);
    FLAG(ENG_ANIM_VECT_PCONT);
    FLAG(ENG_ANIM_VECT_VROT);
    FLAG(ENG_ANIM_VECT_VFLU);
    FLAG(ENG_ANIM_VECT_DROT);
    FLAG(ENG_ANIM_VECT_FVEL);
    FLAG(ENG_ANIM_VECT_FREAC);
    FLAG(ENG_ANIM_VECT_MREAC);
    FLAG(ENG_ANIM_VECT_CLUSTER);
    SEPARATOR("CLUSTER");
    FLAG(ENG_ANIM_VECT_CLUSTER_FORCE);
    FLAG(ENG_ANIM_VECT_CLUSTER_MOM);
    SEPARATOR("");
}

// File format
FORMAT(radioss41) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        ASSIGN(ENG_ANIM_VECT_VEL,  _FIND(_opt,"VEL"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC,  _FIND(_opt,"ACC"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_CONT, _FIND(_opt,"CONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);
    }
}

FORMAT(radioss44) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }

        if(ENG_ANIM_VECT_VROT == 1)
        {
            HEADER("/ANIM/VECT/VROT");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        ASSIGN(ENG_ANIM_VECT_VEL,  _FIND(_opt,"VEL"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC,  _FIND(_opt,"ACC"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_CONT, _FIND(_opt,"CONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VROT, _FIND(_opt,"VROT"), IMPORT);
    }
}

FORMAT(radioss51) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }

        if(ENG_ANIM_VECT_VROT == 1)
        {
            HEADER("/ANIM/VECT/VROT");
        }

        if(ENG_ANIM_VECT_VFLU == 1)
        {
            HEADER("/ANIM/VECT/VFLU");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        ASSIGN(ENG_ANIM_VECT_VEL,  _FIND(_opt,"VEL"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC,  _FIND(_opt,"ACC"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_CONT, _FIND(_opt,"CONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VROT, _FIND(_opt,"VROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VFLU, _FIND(_opt,"VFLU"), IMPORT);
    }
}

FORMAT(radioss90) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }

        if(ENG_ANIM_VECT_PCONT == 1)
        {
            HEADER("/ANIM/VECT/PCONT");
        }

        if(ENG_ANIM_VECT_VROT == 1)
        {
            HEADER("/ANIM/VECT/VROT");
        }

        if(ENG_ANIM_VECT_VFLU == 1)
        {
            HEADER("/ANIM/VECT/VFLU");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        ASSIGN(ENG_ANIM_VECT_VEL,  _FIND(_opt,"VEL"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC,  _FIND(_opt,"ACC"),  IMPORT);

        if(_opt == "CONT")
        {
            ASSIGN(ENG_ANIM_VECT_CONT, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_PCONT, _FIND(_opt,"PCONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VROT, _FIND(_opt,"VROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VFLU, _FIND(_opt,"VFLU"), IMPORT);
    }
}

FORMAT(radioss100) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_CONT2 == 1)
        {
            HEADER("/ANIM/VECT/CONT2");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }

        if(ENG_ANIM_VECT_PCONT == 1)
        {
            HEADER("/ANIM/VECT/PCONT");
        }

        if(ENG_ANIM_VECT_VROT == 1)
        {
            HEADER("/ANIM/VECT/VROT");
        }

        if(ENG_ANIM_VECT_DROT == 1)
        {
            HEADER("/ANIM/VECT/DROT");
        }

        if(ENG_ANIM_VECT_VFLU == 1)
        {
            HEADER("/ANIM/VECT/VFLU");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        ASSIGN(ENG_ANIM_VECT_VEL,  _FIND(_opt,"VEL"),  IMPORT);

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC,  _FIND(_opt,"ACC"),  IMPORT);

        if(_opt == "CONT")
        {
            ASSIGN(ENG_ANIM_VECT_CONT, _FIND(_opt,"CONT"), IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_CONT2, _FIND(_opt,"CONT2"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_PCONT, _FIND(_opt,"PCONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VROT, _FIND(_opt,"VROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_DROT, _FIND(_opt,"DROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VFLU, _FIND(_opt,"VFLU"), IMPORT);
    }
}

FORMAT(radioss120) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_CONT2 == 1)
        {
            HEADER("/ANIM/VECT/CONT2");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }

        if(ENG_ANIM_VECT_PCONT == 1)
        {
            HEADER("/ANIM/VECT/PCONT");
        }

        if(ENG_ANIM_VECT_VROT == 1)
        {
            HEADER("/ANIM/VECT/VROT");
        }

        if(ENG_ANIM_VECT_DROT == 1)
        {
            HEADER("/ANIM/VECT/DROT");
        }

        if(ENG_ANIM_VECT_FVEL == 1)
        {
            HEADER("/ANIM/VECT/FVEL");
        }

        if(ENG_ANIM_VECT_FREAC == 1)
        {
            HEADER("/ANIM/VECT/FREAC");
        }

        if(ENG_ANIM_VECT_MREAC == 1)
        {
            HEADER("/ANIM/VECT/MREAC");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        if(_opt == "VEL")
        {
            ASSIGN(ENG_ANIM_VECT_VEL, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC, _FIND(_opt,"ACC"), IMPORT);

        if(_opt == "CONT")
        {
            ASSIGN(ENG_ANIM_VECT_CONT, _FIND(_opt,"CONT"), IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_CONT2, _FIND(_opt,"CONT2"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_PCONT, _FIND(_opt,"PCONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VROT, _FIND(_opt,"VROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_DROT, _FIND(_opt,"DROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FVEL, _FIND(_opt,"FVEL"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FREAC, _FIND(_opt,"FREAC"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_MREAC, _FIND(_opt,"MREAC"), IMPORT);
    }
}

FORMAT(radioss140) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_CONT2 == 1)
        {
            HEADER("/ANIM/VECT/CONT2");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }

        if(ENG_ANIM_VECT_PCONT == 1)
        {
            HEADER("/ANIM/VECT/PCONT");
        }

        if(ENG_ANIM_VECT_VROT == 1)
        {
            HEADER("/ANIM/VECT/VROT");
        }

        if(ENG_ANIM_VECT_DROT == 1)
        {
            HEADER("/ANIM/VECT/DROT");
        }

        if(ENG_ANIM_VECT_FVEL == 1)
        {
            HEADER("/ANIM/VECT/FVEL");
        }

        if(ENG_ANIM_VECT_FREAC == 1)
        {
            HEADER("/ANIM/VECT/FREAC");
        }

        if(ENG_ANIM_VECT_MREAC == 1)
        {
            HEADER("/ANIM/VECT/MREAC");
        }

        if(ENG_ANIM_VECT_CLUSTER == 1)
        {
            HEADER("/ANIM/VECT/CLUSTER");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        if(_opt == "VEL")
        {
            ASSIGN(ENG_ANIM_VECT_VEL, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC, _FIND(_opt,"ACC"), IMPORT);

        if(_opt == "CONT")
        {
            ASSIGN(ENG_ANIM_VECT_CONT, _FIND(_opt,"CONT"), IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_CONT2, _FIND(_opt,"CONT2"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_PCONT, _FIND(_opt,"PCONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VROT, _FIND(_opt,"VROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_DROT, _FIND(_opt,"DROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FVEL, _FIND(_opt,"FVEL"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FREAC, _FIND(_opt,"FREAC"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_MREAC, _FIND(_opt,"MREAC"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_CLUSTER, _FIND(_opt,"CLUSTER"), IMPORT);
    }
}

FORMAT(radioss2017)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(ENG_ANIM_VECT_VEL == 1)
        {
            HEADER("/ANIM/VECT/VEL");
        }

        if(ENG_ANIM_VECT_DISP == 1)
        {
            HEADER("/ANIM/VECT/DISP");
        }

        if(ENG_ANIM_VECT_ACC == 1)
        {
            HEADER("/ANIM/VECT/ACC");
        }

        if(ENG_ANIM_VECT_CONT == 1)
        {
            HEADER("/ANIM/VECT/CONT");
        }

        if(ENG_ANIM_VECT_CONT2 == 1)
        {
            HEADER("/ANIM/VECT/CONT2");
        }

        if(ENG_ANIM_VECT_FINT == 1)
        {
            HEADER("/ANIM/VECT/FINT");
        }

        if(ENG_ANIM_VECT_FEXT == 1)
        {
            HEADER("/ANIM/VECT/FEXT");
        }

        if(ENG_ANIM_VECT_FOPT == 1)
        {
            HEADER("/ANIM/VECT/FOPT");
        }

        if(ENG_ANIM_VECT_PCONT == 1)
        {
            HEADER("/ANIM/VECT/PCONT");
        }

        if(ENG_ANIM_VECT_VROT == 1)
        {
            HEADER("/ANIM/VECT/VROT");
        }

        if(ENG_ANIM_VECT_DROT == 1)
        {
            HEADER("/ANIM/VECT/DROT");
        }

        if(ENG_ANIM_VECT_FVEL == 1)
        {
            HEADER("/ANIM/VECT/FVEL");
        }

        if(ENG_ANIM_VECT_FREAC == 1)
        {
            HEADER("/ANIM/VECT/FREAC");
        }

        if(ENG_ANIM_VECT_MREAC == 1)
        {
            HEADER("/ANIM/VECT/MREAC");
        }

        if(ENG_ANIM_VECT_CLUSTER == 1 && ENG_ANIM_VECT_CLUSTER_FORCE == 1)
        {
            HEADER("/ANIM/VECT/CLUST/FORCE");
        }

        if(ENG_ANIM_VECT_CLUSTER == 1 && ENG_ANIM_VECT_CLUSTER_MOM == 1)
        {
            HEADER("/ANIM/VECT/CLUST/MOM");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/VECT/%s",_opt);

        if(_opt == "VEL")
        {
            ASSIGN(ENG_ANIM_VECT_VEL, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_DISP, _FIND(_opt,"DISP"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_ACC, _FIND(_opt,"ACC"), IMPORT);

        if(_opt == "CONT")
        {
            ASSIGN(ENG_ANIM_VECT_CONT, _FIND(_opt,"CONT"), IMPORT);
        }

        ASSIGN(ENG_ANIM_VECT_CONT2, _FIND(_opt,"CONT2"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FINT, _FIND(_opt,"FINT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FEXT, _FIND(_opt,"FEXT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FOPT, _FIND(_opt,"FOPT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_PCONT, _FIND(_opt,"PCONT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_VROT, _FIND(_opt,"VROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_DROT, _FIND(_opt,"DROT"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FVEL, _FIND(_opt,"FVEL"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_FREAC, _FIND(_opt,"FREAC"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_MREAC, _FIND(_opt,"MREAC"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_CLUSTER, _FIND(_opt,"CLUST"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_CLUSTER_FORCE, _FIND(_opt,"FORCE"), IMPORT);

        ASSIGN(ENG_ANIM_VECT_CLUSTER_MOM, _FIND(_opt,"MOM"), IMPORT);
    }
}