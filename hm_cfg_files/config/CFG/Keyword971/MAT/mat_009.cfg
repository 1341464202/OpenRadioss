// HWVERSION_2021.0.0.30_Dec 22 2020_19:07:29
// Copyright (c) 2020 Altair Engineering, Inc. All rights reserved.
// Contains trade secrets of Altair Engineering, Inc.
// Copyright notice does not imply publication.
//
// Material law 00
// 


 ATTRIBUTES(COMMON) 
 
 {
  
  // Initial and reference densities
  KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                    = VALUE(INT, "Title");
  CommentEnumField                = VALUE(INT, "User Comments");
  Num_Comments                    = SIZE("No. of comment lines");
  Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                             = VALUE(FLOAT, "Rho");  
  LSD_MAT_PC                      = VALUE(FLOAT, "PC");
  LSD_MAT_MU                      = VALUE(FLOAT, "MU");
  LSD_MAT_TEROD                   = VALUE(FLOAT, "TEROD");
  LSD_MAT_CEROD                   = VALUE(FLOAT, "CEROD");
  E                               = VALUE(FLOAT, "E");
  Nu                              = VALUE(FLOAT, "PR");
  RegTypeEnumField                = VALUE(INT, "Type");
}

SKEYWORDS_IDENTIFIER(COMMON)

{

  KEYWORD_STR                 = 9000;
  CommentEnumField            = 3220;
  Num_Comments                = 3101;
  LSD_TitleOpt                = 90;
  Comments                    = 3100;
  Rho                         = 118;
  LSD_MAT_PC                  = 282;
  LSD_MAT_MU                  = 1162;
  LSD_MAT_TEROD               = 1163;
  LSD_MAT_CEROD               = 1164;
  E                           = 119;
  Nu                          = 120;
  RegTypeEnumField            = 5827;


}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  PRESSURE_CUTOFF=SCALAR(LSD_MAT_PC);
  DYNAMIC_VISCOSITY=SCALAR(LSD_MAT_MU);
  RELAVE_VOLUME=SCALAR(LSD_MAT_TEROD);
  RELATIVE_VOLUME=SCALAR(LSD_MAT_CEROD);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 

{


    ASSIGN(KEYWORD_STR, "*MAT_NULL");
    RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }  
     RADIO(RegTypeEnumField)
     {
        ADD(0, "Regular");
     }
    FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
    SCALAR(Rho)             { DIMENSION="density";          }
 optional:
    SCALAR(LSD_MAT_PC)      {DIMENSION="pressure";}
    SCALAR(LSD_MAT_MU)      {DIMENSION="dynamicviscosity";}
    SCALAR(LSD_MAT_TEROD)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_CEROD)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(E)               {DIMENSION="pressure";}
    SCALAR(Nu)              {DIMENSION="DIMENSIONLESS";}
/*
 graphical SUPPORT("Part(s) to which material is applied") {
  OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL,/COMPONENT/SPHCEL);
  ADD(COMPONENT,"Parts");
}
*/
}

// File format
FORMAT(Keyword971) 
{
        //
        COMMENT("$      MID       RHO        PC        MU     TEROD     CEROD         E        PR");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_PC,LSD_MAT_MU,LSD_MAT_TEROD,LSD_MAT_CEROD,E,Nu);
        //

}